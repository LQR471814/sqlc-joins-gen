// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const getUserData = `-- name: GetUserData :many
select email, gpa, PSUserCourse.useremail, PSUserCourse.coursename, PSUserAssignment.useremail, assignmentname, PSUserAssignment.coursename, missing, collected, scored, total, PSAssignment.name, PSAssignment.coursename, assignmenttypename, PSAssignment.description, PSAssignment.duedate, PSAssignment.category, PSUserMeeting.useremail, PSUserMeeting.coursename, starttime, endtime, MoodleUserCourse.courseid, MoodleUserCourse.useremail, id, MoodleCourse.coursename, teacher, zoom, MoodlePage.courseid, url, content, MoodleAssignment.name, MoodleAssignment.courseid, MoodleAssignment.description, MoodleAssignment.duedate, MoodleAssignment.category from User
inner join PSUserCourse on User.email = PSUserCourse.userEmail
inner join PSUserAssignment on
    PSUserCourse.courseName = PSUserAssignment.courseName and
    PSUserCourse.userEmail = PSUserAssignment.userEmail
inner join PSAssignment on
    PSUserAssignment.assignmentName = PSAssignment.name and
    PSUserAssignment.courseName = PSAssignment.courseName
inner join PSUserMeeting on
    PSUserCourse.userEmail = PSUserMeeting.userEmail and
    PSUserCourse.courseName = PSUserMeeting.courseName
inner join MoodleUserCourse on User.email = MoodleUserCourse.userEmail
inner join MoodleCourse on MoodleUserCourse.courseId = MoodleCourse.id
inner join MoodlePage on MoodleCourse.id = MoodlePage.courseId
inner join MoodleAssignment on MoodleCourse.id = MoodleAssignment.courseId
where email = ?
`

type GetUserDataRow struct {
	Email              string
	Gpa                float64
	Useremail          string
	Coursename         string
	Useremail_2        string
	Assignmentname     string
	Coursename_2       string
	Missing            int64
	Collected          int64
	Scored             sql.NullFloat64
	Total              sql.NullFloat64
	Name               string
	Coursename_3       string
	Assignmenttypename string
	Description        sql.NullString
	Duedate            int64
	Category           string
	Useremail_3        string
	Coursename_4       string
	Starttime          int64
	Endtime            int64
	Courseid           string
	Useremail_4        string
	ID                 string
	Coursename_5       string
	Teacher            sql.NullString
	Zoom               sql.NullString
	Courseid_2         string
	Url                string
	Content            string
	Name_2             string
	Courseid_3         string
	Description_2      sql.NullString
	Duedate_2          int64
	Category_2         sql.NullString
}

func (q *Queries) GetUserData(ctx context.Context, email string) ([]GetUserDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserData, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserDataRow
	for rows.Next() {
		var i GetUserDataRow
		if err := rows.Scan(
			&i.Email,
			&i.Gpa,
			&i.Useremail,
			&i.Coursename,
			&i.Useremail_2,
			&i.Assignmentname,
			&i.Coursename_2,
			&i.Missing,
			&i.Collected,
			&i.Scored,
			&i.Total,
			&i.Name,
			&i.Coursename_3,
			&i.Assignmenttypename,
			&i.Description,
			&i.Duedate,
			&i.Category,
			&i.Useremail_3,
			&i.Coursename_4,
			&i.Starttime,
			&i.Endtime,
			&i.Courseid,
			&i.Useremail_4,
			&i.ID,
			&i.Coursename_5,
			&i.Teacher,
			&i.Zoom,
			&i.Courseid_2,
			&i.Url,
			&i.Content,
			&i.Name_2,
			&i.Courseid_3,
			&i.Description_2,
			&i.Duedate_2,
			&i.Category_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
