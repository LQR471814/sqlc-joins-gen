// Code generated by sqlc-joins-gen. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type queryMap[T any] struct {
	dict map[string]*T
	list []T
}

func newQueryMap[T any]() queryMap[T] {
	return queryMap[T]{
		dict: make(map[string]*T),
	}
}

// Table: User
type GetUserData struct {
	Gpa              float64
	Email            string
	MoodleUserCourse []GetUserData0
	PSUserCourse     []GetUserData1
}

// Table: MoodleUserCourse
type GetUserData0 struct {
	CourseId     string
	UserEmail    string
	MoodleCourse GetUserData00
}

// Table: PSUserCourse
type GetUserData1 struct {
	CourseName       string
	UserEmail        string
	PSUserAssignment []GetUserData10
	PSUserMeeting    []GetUserData11
}

// Table: MoodleCourse
type GetUserData00 struct {
	Id               string
	CourseName       string
	Teacher          sql.NullString
	Zoom             sql.NullString
	MoodlePage       []GetUserData000
	MoodleAssignment []GetUserData001
}

// Table: PSUserAssignment
type GetUserData10 struct {
	UserEmail      string
	AssignmentName string
	CourseName     string
	Missing        int
	Collected      int
	Scored         sql.NullFloat64
	Total          sql.NullFloat64
	PSAssignment   GetUserData100
}

// Table: PSUserMeeting
type GetUserData11 struct {
	UserEmail  string
	CourseName string
	StartTime  int
	EndTime    int
}

// Table: MoodlePage
type GetUserData000 struct {
	CourseId string
	Url      string
	Content  string
}

// Table: MoodleAssignment
type GetUserData001 struct {
	Name        string
	CourseId    string
	Description sql.NullString
	Duedate     int
	Category    sql.NullString
}

// Table: PSAssignment
type GetUserData100 struct {
	Name               string
	CourseName         string
	AssignmentTypeName string
	Description        sql.NullString
	Duedate            int
	Category           string
}

const queryGetUserData = `select
User.gpa as User_gpa
User.email as User_email
MoodleUserCourse.courseId as MoodleUserCourse_courseId
MoodleUserCourse.userEmail as MoodleUserCourse_userEmail
MoodleCourse.id as MoodleCourse_id
MoodleCourse.courseName as MoodleCourse_courseName
MoodleCourse.teacher as MoodleCourse_teacher
MoodleCourse.zoom as MoodleCourse_zoom
MoodlePage.courseId as MoodlePage_courseId
MoodlePage.url as MoodlePage_url
MoodlePage.content as MoodlePage_content
MoodleAssignment.name as MoodleAssignment_name
MoodleAssignment.courseId as MoodleAssignment_courseId
MoodleAssignment.description as MoodleAssignment_description
MoodleAssignment.duedate as MoodleAssignment_duedate
MoodleAssignment.category as MoodleAssignment_category
PSUserCourse.courseName as PSUserCourse_courseName
PSUserCourse.userEmail as PSUserCourse_userEmail
PSUserAssignment.userEmail as PSUserAssignment_userEmail
PSUserAssignment.assignmentName as PSUserAssignment_assignmentName
PSUserAssignment.courseName as PSUserAssignment_courseName
PSUserAssignment.missing as PSUserAssignment_missing
PSUserAssignment.collected as PSUserAssignment_collected
PSUserAssignment.scored as PSUserAssignment_scored
PSUserAssignment.total as PSUserAssignment_total
PSAssignment.name as PSAssignment_name
PSAssignment.courseName as PSAssignment_courseName
PSAssignment.assignmentTypeName as PSAssignment_assignmentTypeName
PSAssignment.description as PSAssignment_description
PSAssignment.duedate as PSAssignment_duedate
PSAssignment.category as PSAssignment_category
PSUserMeeting.userEmail as PSUserMeeting_userEmail
PSUserMeeting.courseName as PSUserMeeting_courseName
PSUserMeeting.startTime as PSUserMeeting_startTime
PSUserMeeting.endTime as PSUserMeeting_endTime
from GetUserData
inner join MoodleUserCourse on MoodleUserCourse.userEmail = User.email
inner join MoodleCourse on MoodleUserCourse.courseId = MoodleCourse.id
inner join MoodlePage on MoodlePage.courseId = MoodleCourse.id
inner join MoodleAssignment on MoodleAssignment.courseId = MoodleCourse.id
inner join PSUserCourse on PSUserCourse.userEmail = User.email
inner join PSUserAssignment on PSUserAssignment.courseName = PSUserCourse.courseName and PSUserAssignment.userEmail = PSUserCourse.userEmail
inner join PSAssignment on PSUserAssignment.assignmentName = PSAssignment.name and PSUserAssignment.courseName = PSAssignment.courseName
inner join PSUserMeeting on PSUserMeeting.userEmail = PSUserCourse.userEmail and PSUserMeeting.courseName = PSUserCourse.courseName
where User.email = ?
order by
User.gpa asc`

func (q *Queries) GetUserData(ctx context.Context, args any) ([]GetUserData, error) {
	rows, err := q.db.QueryContext(ctx, queryGetUserData, args)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	GetUserDataMap := newQueryMap[GetUserData]()
	GetUserData0Map := newQueryMap[GetUserData0]()
	GetUserData1Map := newQueryMap[GetUserData1]()
	GetUserData00Map := newQueryMap[GetUserData00]()
	GetUserData10Map := newQueryMap[GetUserData10]()
	GetUserData11Map := newQueryMap[GetUserData11]()
	GetUserData000Map := newQueryMap[GetUserData000]()
	GetUserData001Map := newQueryMap[GetUserData001]()
	GetUserData100Map := newQueryMap[GetUserData100]()

	for rows.Next() {
		var GetUserData GetUserData
		var GetUserData0 GetUserData0
		var GetUserData1 GetUserData1
		var GetUserData00 GetUserData00
		var GetUserData10 GetUserData10
		var GetUserData11 GetUserData11
		var GetUserData000 GetUserData000
		var GetUserData001 GetUserData001
		var GetUserData100 GetUserData100

		err := rows.Scan(
			&GetUserData.Gpa,
			&GetUserData.Email,
			&GetUserData0.CourseId,
			&GetUserData0.UserEmail,
			&GetUserData00.Id,
			&GetUserData00.CourseName,
			&GetUserData00.Teacher,
			&GetUserData00.Zoom,
			&GetUserData000.CourseId,
			&GetUserData000.Url,
			&GetUserData000.Content,
			&GetUserData001.Name,
			&GetUserData001.CourseId,
			&GetUserData001.Description,
			&GetUserData001.Duedate,
			&GetUserData001.Category,
			&GetUserData1.CourseName,
			&GetUserData1.UserEmail,
			&GetUserData10.UserEmail,
			&GetUserData10.AssignmentName,
			&GetUserData10.CourseName,
			&GetUserData10.Missing,
			&GetUserData10.Collected,
			&GetUserData10.Scored,
			&GetUserData10.Total,
			&GetUserData100.Name,
			&GetUserData100.CourseName,
			&GetUserData100.AssignmentTypeName,
			&GetUserData100.Description,
			&GetUserData100.Duedate,
			&GetUserData100.Category,
			&GetUserData11.UserEmail,
			&GetUserData11.CourseName,
			&GetUserData11.StartTime,
			&GetUserData11.EndTime,
		)
		if err != nil {
			return nil, err
		}

		GetUserDataPkey := fmt.Sprint(GetUserData.Email)
		existingGetUserData, ok := GetUserDataMap.dict[GetUserDataPkey]
		if !ok {
			GetUserDataMap.list = append(GetUserDataMap.list, GetUserData)
			GetUserDataMap.dict[GetUserDataPkey] = &GetUserDataMap.list[len(GetUserDataMap.list)-1]
		}

		GetUserData0Pkey := fmt.Sprint(GetUserData0.CourseId, GetUserData0.UserEmail)
		existingGetUserData0, ok := GetUserData0Map.dict[GetUserData0Pkey]
		if !ok {
			GetUserData0Map.list = append(GetUserData0Map.list, GetUserData0)
			GetUserData0Map.dict[GetUserData0Pkey] = &GetUserData0Map.list[len(GetUserData0Map.list)-1]
			existingGetUserData.MoodleUserCourse = append(existingGetUserData.MoodleUserCourse, *existingGetUserData0)
		}

		GetUserData1Pkey := fmt.Sprint(GetUserData1.CourseName, GetUserData1.UserEmail)
		existingGetUserData1, ok := GetUserData1Map.dict[GetUserData1Pkey]
		if !ok {
			GetUserData1Map.list = append(GetUserData1Map.list, GetUserData1)
			GetUserData1Map.dict[GetUserData1Pkey] = &GetUserData1Map.list[len(GetUserData1Map.list)-1]
			existingGetUserData.PSUserCourse = append(existingGetUserData.PSUserCourse, *existingGetUserData1)
		}

		GetUserData00Pkey := fmt.Sprint(GetUserData00.Id)
		existingGetUserData00, ok := GetUserData00Map.dict[GetUserData00Pkey]
		if !ok {
			GetUserData00Map.list = append(GetUserData00Map.list, GetUserData00)
			GetUserData00Map.dict[GetUserData00Pkey] = &GetUserData00Map.list[len(GetUserData00Map.list)-1]
			existingGetUserData0.MoodleCourse = *existingGetUserData00
		}

		GetUserData10Pkey := fmt.Sprint(GetUserData10.UserEmail, GetUserData10.AssignmentName, GetUserData10.CourseName)
		existingGetUserData10, ok := GetUserData10Map.dict[GetUserData10Pkey]
		if !ok {
			GetUserData10Map.list = append(GetUserData10Map.list, GetUserData10)
			GetUserData10Map.dict[GetUserData10Pkey] = &GetUserData10Map.list[len(GetUserData10Map.list)-1]
			existingGetUserData1.PSUserAssignment = append(existingGetUserData1.PSUserAssignment, *existingGetUserData10)
		}

		GetUserData11Pkey := fmt.Sprint(GetUserData11.UserEmail, GetUserData11.CourseName, GetUserData11.StartTime)
		existingGetUserData11, ok := GetUserData11Map.dict[GetUserData11Pkey]
		if !ok {
			GetUserData11Map.list = append(GetUserData11Map.list, GetUserData11)
			GetUserData11Map.dict[GetUserData11Pkey] = &GetUserData11Map.list[len(GetUserData11Map.list)-1]
			existingGetUserData1.PSUserMeeting = append(existingGetUserData1.PSUserMeeting, *existingGetUserData11)
		}

		GetUserData000Pkey := fmt.Sprint(GetUserData000.CourseId, GetUserData000.Url)
		existingGetUserData000, ok := GetUserData000Map.dict[GetUserData000Pkey]
		if !ok {
			GetUserData000Map.list = append(GetUserData000Map.list, GetUserData000)
			GetUserData000Map.dict[GetUserData000Pkey] = &GetUserData000Map.list[len(GetUserData000Map.list)-1]
			existingGetUserData00.MoodlePage = append(existingGetUserData00.MoodlePage, *existingGetUserData000)
		}

		GetUserData001Pkey := fmt.Sprint(GetUserData001.Name, GetUserData001.CourseId)
		existingGetUserData001, ok := GetUserData001Map.dict[GetUserData001Pkey]
		if !ok {
			GetUserData001Map.list = append(GetUserData001Map.list, GetUserData001)
			GetUserData001Map.dict[GetUserData001Pkey] = &GetUserData001Map.list[len(GetUserData001Map.list)-1]
			existingGetUserData00.MoodleAssignment = append(existingGetUserData00.MoodleAssignment, *existingGetUserData001)
		}

		GetUserData100Pkey := fmt.Sprint(GetUserData100.Name, GetUserData100.CourseName)
		existingGetUserData100, ok := GetUserData100Map.dict[GetUserData100Pkey]
		if !ok {
			GetUserData100Map.list = append(GetUserData100Map.list, GetUserData100)
			GetUserData100Map.dict[GetUserData100Pkey] = &GetUserData100Map.list[len(GetUserData100Map.list)-1]
			existingGetUserData10.PSAssignment = *existingGetUserData100
		}
	}

	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return GetUserDataMap.list, nil
}
