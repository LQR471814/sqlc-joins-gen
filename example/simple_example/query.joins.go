// Code generated by sqlc-joins-gen. DO NOT EDIT.

package simple_example

import (
	"context"
	"fmt"
	"strings"
)

type queryMap[T any] struct {
	dict map[string]*T
	list []T
}

func newQueryMap[T any]() queryMap[T] {
	return queryMap[T]{
		dict: make(map[string]*T),
	}
}

// Table: Author
type GetAuthors struct {
	Name string
	Id   int
	Book []GetAuthors0
}

// Table: Book
type GetAuthors0 struct {
	Id       int
	AuthorId int
	Name     string
}

const getAuthorsQuery = `select
"Author"."name" as "Author_name",
"Author"."id" as "Author_id",
"Book"."id" as "Book_id",
"Book"."authorId" as "Book_authorId",
"Book"."name" as "Book_name"
from "Author"
inner join (select * from "Book" order by "Book"."name" dsc limit 5) as "Book" on "Book"."authorId" = "Author"."id"
where Author.age > $0
order by "Author"."age" asc
offset 4`

func (q *Queries) GetAuthors(ctx context.Context, age int) (*GetAuthors, error) {
	queryStr := getAuthorsQuery

	ageStr := fmt.Sprint(age)
	queryStr = strings.Replace(queryStr, "$0", ageStr, 1)

	rows, err := q.db.QueryContext(ctx, queryStr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	getAuthorsMap := newQueryMap[GetAuthors]()
	getAuthors0Map := newQueryMap[GetAuthors0]()

	for rows.Next() {
		var getAuthors GetAuthors
		var getAuthors0 GetAuthors0

		err := rows.Scan(
			&getAuthors.Name,
			&getAuthors.Id,
			&getAuthors0.Id,
			&getAuthors0.AuthorId,
			&getAuthors0.Name,
		)
		if err != nil {
			return nil, err
		}

		getAuthorsPkey := fmt.Sprint(getAuthors.Id)
		getAuthorsExisting, ok := getAuthorsMap.dict[getAuthorsPkey]
		if !ok {
			getAuthorsMap.list = append(getAuthorsMap.list, getAuthors)
			getAuthorsMap.dict[getAuthorsPkey] = &getAuthorsMap.list[len(getAuthorsMap.list)-1]
		}

		getAuthors0Pkey := fmt.Sprint(getAuthors0.Id)
		getAuthors0Existing, ok := getAuthors0Map.dict[getAuthors0Pkey]
		if !ok {
			getAuthors0Map.list = append(getAuthors0Map.list, getAuthors0)
			getAuthors0Map.dict[getAuthors0Pkey] = &getAuthors0Map.list[len(getAuthors0Map.list)-1]
			getAuthorsExisting.Book = append(getAuthorsExisting.Book, *getAuthors0Existing)
		}
	}

	err = rows.Close()
	if err != nil {
		return nil, err
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}
	if len(getAuthorsMap.list) == 0 {
		return nil, nil
	}
	return &getAuthorsMap.list[0], nil
}
